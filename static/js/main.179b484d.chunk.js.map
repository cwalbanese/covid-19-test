{"version":3,"sources":["components/Nav/Nav.js","components/About/About.js","components/Results/Results.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["toggleMenu","cross","document","querySelector","menu","page","classList","toggle","style","overflow","Nav","onClick","className","src","alt","About","href","Results","props","state","match","params","data","updated","url","this","fetch","then","response","json","setState","toUpperCase","replace","callPhone","evt","window","open","target","innerHTML","id","map","result","key","name","phones","number","physical_address","address_1","city","state_province","postal_code","description","Component","Footer","App","path","render","routerProps","Boolean","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+OAEMA,G,YAAa,WACjB,IAAMC,EAAQC,SAASC,cAAc,UAC/BC,EAAOF,SAASC,cAAc,SAC9BE,EAAOH,SAASC,cAAc,mBACpCF,EAAMK,UAAUC,OAAO,eACvBH,EAAKE,UAAUC,OAAO,eAEM,YAAxBF,EAAKG,MAAMC,SACbJ,EAAKG,MAAMC,SAAW,SAEtBJ,EAAKG,MAAMC,SAAW,YAwBXC,MApBf,WACE,OACE,6BACG,IACD,6BACE,yBACEC,QAASX,EACTY,UAAU,QACVC,IAAI,8DACJC,IAAI,cAGN,uBAAGH,QAASX,EAAYY,UAAU,UAAlC,wCC1BFZ,EAAa,WACjB,IAAMC,EAAQC,SAASC,cAAc,UAC/BC,EAAOF,SAASC,cAAc,SACpCF,EAAMK,UAAUC,OAAO,eACvBH,EAAKE,UAAUC,OAAO,gBA6HTQ,MA1Hf,WACE,OACE,yBAAKH,UAAU,SACb,yBACEA,UAAU,SACVC,IAAI,+DACJC,IAAI,4BAGN,uBAAGF,UAAU,iBAAb,8BACA,uBAAGA,UAAU,iBAAb,0MAKA,yBAAKA,UAAU,oBACb,wBAAID,QAASX,GACX,4BACE,uBAAGgB,KAAK,qBAAR,YAEF,4BACE,uBAAGA,KAAK,oBAAR,WACI,IACN,4BACE,uBAAGA,KAAK,qBAAR,YACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,wBAAR,eACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,yBAAR,gBACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,qBAAR,YACI,IACN,4BACE,uBAAGA,KAAK,qBAAR,YACI,IACN,4BACE,uBAAGA,KAAK,oBAAR,WACI,IACN,4BACE,uBAAGA,KAAK,mBAAR,UACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,qBAAR,YACI,IACN,4BACE,uBAAGA,KAAK,oBAAR,WACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,uBAAR,cACI,IACN,4BACE,uBAAGA,KAAK,mBAAR,UACI,IACN,4BACE,uBAAGA,KAAK,2BAAR,kBACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,uBAAR,cAEF,4BACE,uBAAGA,KAAK,yBAAR,gBACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,qBAAR,YACI,IACN,4BACE,uBAAGA,KAAK,wBAAR,eACI,IACN,4BACE,uBAAGA,KAAK,wBAAR,eACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,4BAAR,mBACI,IACN,4BACE,uBAAGA,KAAK,sBAAR,aACI,IACN,4BACE,uBAAGA,KAAK,0BAAR,iBACI,IACN,4BACE,uBAAGA,KAAK,mBAAR,UAEF,4BACE,uBAAGA,KAAK,kBAAR,SAEF,4BACE,uBAAGA,KAAK,wBAAR,mB,uCCtDGC,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXA,MAAOD,EAAME,MAAMC,OAAOF,MAC1BG,KAAM,GACNC,QAAS,IALM,E,gEASE,IAAD,OACZC,EAAG,uDAAmDC,KAAKN,MAAMA,MAA9D,kBACTO,MAAMF,GACHG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKE,SAAS,CAAER,KAAMM,OAEvBD,MAAK,WACJ,IAAMR,EAAQ,EAAKA,MAAMA,MAAMY,cAAcC,QAAQ,KAAM,KAC3D,EAAKF,SAAS,CAAEX,MAAOA,S,+BAK3B,IAAMc,EAAY,SAACC,GACjBC,OAAOC,KAAP,cAAmBF,EAAIG,OAAOC,aAGhC,OACE,yBAAKC,GAAG,WACN,wBAAI3B,UAAU,iBAAd,eAA2Ca,KAAKN,MAAMA,OAErDM,KAAKN,MAAMG,KAAKkB,KAAI,SAACC,GAAD,OACnB,yBAAK7B,UAAU,eAAe8B,IAAKD,EAAOF,IACxC,yBAAK3B,UAAU,QACb,4BAAK6B,EAAOE,MAEZ,wBAAI/B,UAAU,QAAQD,QAASsB,GAC5BQ,EAAOG,OAAO,GAAKH,EAAOG,OAAO,GAAGC,OAAS,IAEhD,4BACGJ,EAAOK,iBAAiB,GACrBL,EAAOK,iBAAiB,GAAGC,UAAUf,QAAQ,KAAM,IACnD,IAEN,4BACGS,EAAOK,iBAAiB,GACrBL,EAAOK,iBAAiB,GAAGE,KAAO,KAClC,GACHP,EAAOK,iBAAiB,GACrBL,EAAOK,iBAAiB,GAAGG,eAAiB,IAC5C,GACHR,EAAOK,iBAAiB,GACrBL,EAAOK,iBAAiB,GAAGI,YAC3B,KAGR,yBAAKtC,UAAU,eACb,2BAAI6B,EAAOU,aACX,uBAAGvC,UAAU,WAAb,iBAAsC6B,EAAOlB,mB,GA3DrC6B,aCQPC,MARf,WACE,OACE,gCACE,yDCqBSC,MAlBf,WACE,OACE,yBAAK1C,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE2C,KAAM,WACNC,OAAQ,SAACC,GACP,OAAO,kBAAC,EAAD,CAASrC,MAAOqC,EAAYrC,YAIzC,kBAAC,EAAD,QCTcsC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASxC,MACvB,2D,WCXNyC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJ5D,SAAS6D,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.179b484d.chunk.js","sourcesContent":["import React from 'react';\n\nconst toggleMenu = () => {\n  const cross = document.querySelector('.cross');\n  const menu = document.querySelector('.menu');\n  const page = document.querySelector('.page-container');\n  cross.classList.toggle('toggle-menu');\n  menu.classList.toggle('menu-offset');\n\n  if (page.style.overflow === 'visible') {\n    page.style.overflow = 'hidden';\n  } else {\n    page.style.overflow = 'visible';\n  }\n};\n\nfunction Nav() {\n  return (\n    <div>\n      {' '}\n      <nav>\n        <img\n          onClick={toggleMenu}\n          className=\"cross\"\n          src=\"https://cwalbanese.github.io/covid-19-test/images/cross.svg\"\n          alt=\"red cross\"\n        ></img>\n\n        <p onClick={toggleMenu} className=\"choose\">\n          &#9660; choose by available states\n        </p>\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n\nconst toggleMenu = () => {\n  const cross = document.querySelector('.cross');\n  const menu = document.querySelector('.menu');\n  cross.classList.toggle('toggle-menu');\n  menu.classList.toggle('menu-offset');\n};\n\nfunction About() {\n  return (\n    <div className=\"about\">\n      <img\n        className=\"doctor\"\n        src=\"https://cwalbanese.github.io/covid-19-test/images/doctor.jpg\"\n        alt=\"doctor with stethoscope\"\n      ></img>\n\n      <p className=\"testing-title\">COVID-19 TESTING LOCATIONS</p>\n      <p className=\"testing-about\">\n        Welcome. Here you can find various locations across the United States\n        that are providing testing at this time. All data provided is from a\n        third-party source that is contributed to by the community.\n      </p>\n      <div className=\"menu menu-offset\">\n        <ul onClick={toggleMenu}>\n          <li>\n            <a href=\"/alabama/#results\">Alabama</a>\n          </li>\n          <li>\n            <a href=\"/alaska/#results\">Alaska</a>\n          </li>{' '}\n          <li>\n            <a href=\"/arizona/#results\">Arizona</a>\n          </li>{' '}\n          <li>\n            <a href=\"/arkansas/#results\">Arkansas</a>\n          </li>{' '}\n          <li>\n            <a href=\"/california/#results\">California</a>\n          </li>{' '}\n          <li>\n            <a href=\"/colorado/#results\">Colorado</a>\n          </li>{' '}\n          <li>\n            <a href=\"/connecticut/#results\">Connecticut</a>\n          </li>{' '}\n          <li>\n            <a href=\"/delaware/#results\">Delaware</a>\n          </li>{' '}\n          <li>\n            <a href=\"/florida/#results\">Florida</a>\n          </li>{' '}\n          <li>\n            <a href=\"/georgia/#results\">Georgia</a>\n          </li>{' '}\n          <li>\n            <a href=\"/hawaii/#results\">Hawaii</a>\n          </li>{' '}\n          <li>\n            <a href=\"/idaho/#results\">Idaho</a>\n          </li>{' '}\n          <li>\n            <a href=\"/illinois/#results\">Illinois</a>\n          </li>{' '}\n          <li>\n            <a href=\"/indiana/#results\">Indiana</a>\n          </li>{' '}\n          <li>\n            <a href=\"/Kansas/#results\">Kansas</a>\n          </li>{' '}\n          <li>\n            <a href=\"/kentucky/#results\">Kentucky</a>\n          </li>{' '}\n          <li>\n            <a href=\"/louisiana/#results\">Louisiana</a>\n          </li>{' '}\n          <li>\n            <a href=\"/maine/#results\">Maine</a>\n          </li>{' '}\n          <li>\n            <a href=\"/massachusetts/#results\">Massachusetts</a>\n          </li>{' '}\n          <li>\n            <a href=\"/michigan/#results\">Michigan</a>\n          </li>{' '}\n          <li>\n            <a href=\"/minnesota/#results\">Minnesota</a>\n          </li>\n          <li>\n            <a href=\"/mississippi/#results\">Mississippi</a>\n          </li>{' '}\n          <li>\n            <a href=\"/missouri/#results\">Missouri</a>\n          </li>{' '}\n          <li>\n            <a href=\"/montana/#results\">Montana</a>\n          </li>{' '}\n          <li>\n            <a href=\"/new-jersey/#results\">New Jersey</a>\n          </li>{' '}\n          <li>\n            <a href=\"/new-mexico/#results\">New Mexico</a>\n          </li>{' '}\n          <li>\n            <a href=\"/new-york/#results\">New York</a>\n          </li>{' '}\n          <li>\n            <a href=\"/north-carolina/#results\">North Carolina</a>\n          </li>{' '}\n          <li>\n            <a href=\"/oklahoma/#results\">Oklahoma</a>\n          </li>{' '}\n          <li>\n            <a href=\"/pennsylvania/#results\">Pennsylvania</a>\n          </li>{' '}\n          <li>\n            <a href=\"/texas/#results\">Texas</a>\n          </li>\n          <li>\n            <a href=\"/utah/#results\">Utah</a>\n          </li>\n          <li>\n            <a href=\"/washington/#results\">Washington</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { Component } from 'react';\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      state: props.match.params.state,\n      data: [],\n      updated: {},\n    };\n  }\n\n  componentDidMount() {\n    const url = `https://covid-19-testing.github.io/locations/${this.state.state}/complete.json`;\n    fetch(url)\n      .then((response) => response.json())\n      .then((response) => {\n        this.setState({ data: response });\n      })\n      .then(() => {\n        const state = this.state.state.toUpperCase().replace(/-/g, ' ');\n        this.setState({ state: state });\n      });\n  }\n\n  render() {\n    const callPhone = (evt) => {\n      window.open(`tel:${evt.target.innerHTML}`);\n    };\n\n    return (\n      <div id=\"results\">\n        <h1 className=\"results-title\">RESULTS FOR {this.state.state}</h1>\n\n        {this.state.data.map((result) => (\n          <div className=\"testing-site\" key={result.id}>\n            <div className=\"info\">\n              <h2>{result.name}</h2>\n\n              <h3 className=\"phone\" onClick={callPhone}>\n                {result.phones[0] ? result.phones[0].number : ''}\n              </h3>\n              <h3>\n                {result.physical_address[0]\n                  ? result.physical_address[0].address_1.replace(/,/g, '')\n                  : ''}\n              </h3>\n              <h3>\n                {result.physical_address[0]\n                  ? result.physical_address[0].city + ', '\n                  : ''}\n                {result.physical_address[0]\n                  ? result.physical_address[0].state_province + ' '\n                  : ''}\n                {result.physical_address[0]\n                  ? result.physical_address[0].postal_code\n                  : ''}\n              </h3>\n            </div>\n            <div className=\"description\">\n              <p>{result.description}</p>\n              <p className=\"updated\">Last updated: {result.updated}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\nexport default Results;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <p>&copy; 2020 CHRIS ALBANESE</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav/Nav.js';\nimport About from './components/About/About.js';\nimport { Switch, Route } from 'react-router-dom';\nimport Results from './components/Results/Results.js';\nimport Footer from './components/Footer/Footer.js';\n\nfunction App() {\n  return (\n    <div className=\"page-container\">\n      <Nav />\n      <About />\n      <Switch>\n        <Route\n          path={'/:state/'}\n          render={(routerProps) => {\n            return <Results match={routerProps.match} />;\n          }}\n        />\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}